# Problema de Incorporação de Formulários - Diagnóstico e Soluções

## Diagnóstico do Problema

Após análise detalhada, identificamos que o principal problema é que o formulário não está sendo encontrado durante o carregamento em modo de incorporação (embed), resultando em uma tela de carregamento infinita.

### Causas Prováveis:

1. **Problema com o `tenant_id`**: 
   - A aplicação está filtrando formulários por `tenant_id`, mas este campo pode não existir na tabela `forms` ou não estar sendo passado corretamente no código de incorporação.

2. **Problema de comunicação entre iframe e página pai**:
   - Mensagens para ajustar a altura e informar o estado de carregamento não estão sendo enviadas/recebidas corretamente.

3. **Problema com a estrutura do banco de dados**:
   - A consulta supabase está falhando porque a coluna `tenant_id` pode não existir na tabela `forms`.

## Soluções Recomendadas

### Solução 1: Simplificar a Consulta do Formulário

Modificar `ViewForm.tsx` para buscar o formulário apenas pelo ID, sem filtrar por `tenant_id`:

```tsx
const { data: form, isLoading: isFormLoading, error } = useQuery<FormType>({
  queryKey: ["form", id], // Remover effectiveTenantId
  queryFn: async () => {
    console.log(`[ViewForm] Buscando formulário com ID: ${id}`);
    
    // Buscar o formulário apenas pelo ID
    const { data, error } = await supabase
      .from("forms")
      .select("*")
      .eq("id", id)
      .single();

    if (error) {
      console.error("[ViewForm] Erro ao buscar formulário:", error);
      throw error;
    }

    if (!data) {
      throw new Error(`Formulário não encontrado com ID: ${id}`);
    }

    return data as FormType;
  },
});
```

### Solução 2: Criar um Código de Incorporação Simplificado

Um iframe simples é mais provável de funcionar do que o código complexo atual:

```html
<iframe 
  src="http://localhost:3002/form/abbc1d16-9672-4681-a476-8971b640246d?embed=true" 
  style="width: 100%; height: 650px; border: none; border-radius: 8px;" 
  title="Formulário Soren"
  scrolling="no">
</iframe>
```

### Solução 3: Criar uma Página de Diagnóstico

Criar uma página HTML para diagnosticar se o formulário existe no banco de dados:

```html
<!DOCTYPE html>
<html lang="pt-BR">
<head>
    <meta charset="UTF-8">
    <title>Diagnóstico do Formulário</title>
</head>
<body>
    <h1>Diagnóstico do Formulário</h1>
    
    <div>
        <label for="supabaseUrl">URL Supabase:</label>
        <input type="text" id="supabaseUrl" value="https://pdlsbcxkbszahcmaluds.supabase.co">
    </div>
    
    <div>
        <label for="supabaseKey">Key Supabase (anon):</label>
        <input type="text" id="supabaseKey" value="eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InBkbHNiY3hrYnN6YWhjbWFsdWRzIiwicm9sZSI6ImFub24iLCJpYXQiOjE3Mzk1NjM5NTcsImV4cCI6MjA1NTEzOTk1N30.m12oP25YLYcYtR4lZTiYDnKmRgjyp2Qx2wMX8EvoLwU">
    </div>
    
    <div>
        <label for="formId">ID do Formulário:</label>
        <input type="text" id="formId" value="abbc1d16-9672-4681-a476-8971b640246d">
    </div>
    
    <div>
        <label for="tenantId">ID do Tenant:</label>
        <input type="text" id="tenantId" value="28bdc7a7-a678-44e3-a8a9-5b4dfbb2cc74">
    </div>
    
    <button onclick="checkFormById()">Verificar Formulário por ID</button>
    <button onclick="listAllForms()">Listar Todos os Formulários</button>
    <button onclick="checkTableStructure()">Verificar Estrutura da Tabela</button>
    
    <div id="results" style="margin-top: 20px; padding: 10px; background-color: #f5f5f5;">
        <h2>Resultados:</h2>
        <pre id="resultsContent"></pre>
    </div>
    
    <script>
        async function initSupabase() {
            const url = document.getElementById('supabaseUrl').value;
            const key = document.getElementById('supabaseKey').value;
            
            // Função simplificada para simular cliente Supabase
            return {
                from: (table) => ({
                    select: (cols) => ({
                        eq: (field, value) => ({
                            single: async () => {
                                const response = await fetch(`${url}/rest/v1/${table}?${field}=eq.${value}&select=${cols || '*'}`, {
                                    headers: {
                                        'apikey': key,
                                        'Authorization': `Bearer ${key}`
                                    }
                                });
                                
                                if (!response.ok) {
                                    throw new Error(`Erro ${response.status}: ${await response.text()}`);
                                }
                                
                                const data = await response.json();
                                return { data: data[0], error: null };
                            },
                            execute: async () => {
                                const response = await fetch(`${url}/rest/v1/${table}?${field}=eq.${value}&select=${cols || '*'}`, {
                                    headers: {
                                        'apikey': key,
                                        'Authorization': `Bearer ${key}`
                                    }
                                });
                                
                                if (!response.ok) {
                                    throw new Error(`Erro ${response.status}: ${await response.text()}`);
                                }
                                
                                const data = await response.json();
                                return { data, error: null };
                            }
                        }),
                        execute: async () => {
                            const response = await fetch(`${url}/rest/v1/${table}?select=${cols || '*'}`, {
                                headers: {
                                    'apikey': key,
                                    'Authorization': `Bearer ${key}`
                                }
                            });
                            
                            if (!response.ok) {
                                throw new Error(`Erro ${response.status}: ${await response.text()}`);
                            }
                            
                            const data = await response.json();
                            return { data, error: null };
                        }
                    })
                })
            };
        }
        
        async function checkFormById() {
            const formId = document.getElementById('formId').value;
            const resultsContent = document.getElementById('resultsContent');
            
            resultsContent.textContent = "Verificando...";
            
            try {
                const supabase = await initSupabase();
                const { data, error } = await supabase
                    .from("forms")
                    .select("*")
                    .eq("id", formId)
                    .single();
                
                if (error) {
                    resultsContent.textContent = `Erro: ${JSON.stringify(error, null, 2)}`;
                    return;
                }
                
                if (!data) {
                    resultsContent.textContent = `Formulário com ID ${formId} não encontrado!`;
                    return;
                }
                
                resultsContent.textContent = `Formulário encontrado!\n\n${JSON.stringify(data, null, 2)}`;
                
                // Verificar se tem tenant_id
                if (data.tenant_id) {
                    resultsContent.textContent += `\n\nO formulário possui tenant_id: ${data.tenant_id}`;
                } else {
                    resultsContent.textContent += `\n\nATENÇÃO: O formulário NÃO possui a propriedade tenant_id!`;
                }
            } catch (err) {
                resultsContent.textContent = `Erro: ${err.message}`;
            }
        }
        
        async function listAllForms() {
            const resultsContent = document.getElementById('resultsContent');
            
            resultsContent.textContent = "Buscando todos os formulários...";
            
            try {
                const supabase = await initSupabase();
                const { data, error } = await supabase
                    .from("forms")
                    .select("id, name, created_at")
                    .execute();
                
                if (error) {
                    resultsContent.textContent = `Erro: ${JSON.stringify(error, null, 2)}`;
                    return;
                }
                
                if (!data || data.length === 0) {
                    resultsContent.textContent = "Nenhum formulário encontrado!";
                    return;
                }
                
                resultsContent.textContent = `Total de formulários: ${data.length}\n\n${JSON.stringify(data, null, 2)}`;
            } catch (err) {
                resultsContent.textContent = `Erro: ${err.message}`;
            }
        }
        
        async function checkTableStructure() {
            const resultsContent = document.getElementById('resultsContent');
            
            resultsContent.textContent = "Verificando estrutura da tabela 'forms'...";
            
            try {
                // Não temos acesso direto à estrutura via API REST
                // Podemos tentar inferir pela obtenção de um registro
                const supabase = await initSupabase();
                const { data, error } = await supabase
                    .from("forms")
                    .select("*")
                    .execute();
                
                if (error) {
                    resultsContent.textContent = `Erro: ${JSON.stringify(error, null, 2)}`;
                    return;
                }
                
                if (!data || data.length === 0) {
                    resultsContent.textContent = "Nenhum formulário encontrado para analisar estrutura!";
                    return;
                }
                
                // Pegue o primeiro registro e mostre suas propriedades
                const example = data[0];
                const properties = Object.keys(example);
                
                resultsContent.textContent = `Colunas da tabela 'forms':\n\n${properties.join('\n')}\n\nExemplo de registro:\n${JSON.stringify(example, null, 2)}`;
                
                // Verificar se tenant_id existe
                if (properties.includes('tenant_id')) {
                    resultsContent.textContent += `\n\nA coluna 'tenant_id' EXISTE na tabela!`;
                } else {
                    resultsContent.textContent += `\n\nATENÇÃO: A coluna 'tenant_id' NÃO EXISTE na tabela!`;
                }
            } catch (err) {
                resultsContent.textContent = `Erro: ${err.message}`;
            }
        }
    </script>
</body>
</html>
```

## Recomendações para Resolver o Problema

1. **Verificar o Schema do Banco de Dados**:
   - Confirmar se a coluna `tenant_id` realmente existe na tabela `forms`.
   - Se não existir, atualizar o código para não depender dessa coluna.

2. **Simplificar o Código de Incorporação**:
   - Usar um iframe simples e direto, sem lógica complexa.
   - Testar com diferentes valores de porta (3000, 3001, 3002).

3. **Depurar com a Página de Diagnóstico**:
   - Usar a página de diagnóstico para verificar se o formulário existe.
   - Confirmar qual tenant_id deve ser usado (se aplicável).

4. **Considerar Uso de URL Direta**:
   - Como solução alternativa, oferecer um link direto para o formulário ao invés de uma incorporação por iframe.

## Conclusão

O problema principal parece ser uma incompatibilidade entre a estrutura do banco de dados (ausência de `tenant_id` na tabela `forms`) e o código que espera essa coluna. A simplificação do código para não depender dessa coluna deve resolver o problema de incorporação.